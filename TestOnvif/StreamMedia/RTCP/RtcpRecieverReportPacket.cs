using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace TestOnvif
{
    /// <summary>
    /// http://book.itep.ru/4/44/rtc_4493.htm
    /// </summary>
    class RtcpRecieverReportPacket
    {
        /// <summary>
        /// Номер версии RTP
        /// Расположен в битах № 0-1 первого октета пакета
        /// </summary>
        public byte Version;

        /// <summary>
        /// Флаг заполнения нулями конца пакета
        /// Расположен в бите № 2 первого октета
        /// </summary>
        public bool Padding;

        /// <summary>
        /// Тип пакета. Данный пакет всегда имеет тип RtcpPacketType.ReceiverReport
        /// </summary>
        public RtcpPacketType PayloadType;

        /// <summary>
        /// Длина RTCP-пакета в 32-битных словах минус один, включая заголовок и заполнитель
        /// </summary>
        public ushort Length;

        /// <summary>
        /// Идентификатор источника синхронизации для отправителя пакета
        /// </summary>
        public uint SenderSSRC;

        /// <summary>
        /// Идентификатор клиента
        /// </summary>
        public uint RecieverSSRC;

        /// <summary>
        /// Доля потерянных (пакетов): 8 бит 
        /// Часть информационных RTP-пакетов от источника ssrc_n потерянная с момента посылки предыдущего SR или RR-пакетов, 
        /// представленная в виде числа с фиксированной запятой, помещенной слева. 
        /// Это эквивалентно целому, полученному после умножения данного числа на 256. 
        /// Эта доля получается в результате деления числа потерянных пакетов на ожидаемое число пакетов. 
        /// Если потери из-за дубликатов оказались отрицательны, доля потерянных пакетов объявляется равной нулю.
        /// Заметим, что от источника, все пакеты которого были потеряны при транспортировке отчета о приеме послано не будет.
        /// </summary>
        public byte FractionLost = 0;

        /// <summary>
        /// Суммарное число потерянных пакетов: 24 бита
        /// Полное число информационных RTP-пакетов от источника SSRC_n, которые были потеряны с момента начала передачи. 
        /// Это число определяется как разность между ожидаемым и полученным числами пакетов, где число полученных включает в себя и дубликаты. 
        /// Таким образом, пакеты, пришедшие с опозданием, не считаются потерянными, а число потерянных пакетов может оказаться отрицательным,
        /// если получены дубликаты пакетов. 
        /// Число ожидаемых пакетов определяется как разность между номером последнего полученного пакета и номером первого пакета.
        /// </summary>
        public int CumulativeNumberOfPacketsLost = 0;

        /// <summary>
        /// Количество полученных RTP пакетов
        /// </summary>
        public uint ReceivedRtpPackets = 0;

        /// <summary>
        /// Временная метка последнего SR (LSR): 32 бита.
        /// Средние 32 бита из 64 битов временной метки NTP,
        /// полученные как часть самых последних пакетов отчетов отправителя RTCP (SR) из источника SSRC_n.
        /// Если SR еще не был получен, то временная метка LSR имеет нулевое значение.
        /// </summary>
        public uint LastSRTimestamp = 0;

        /// <summary>
        /// Задержка с момента последнего SR (DLSR): 32 бита. 
        /// Задержка в приемнике пакетов, выраженная в единицах, равных 1/65536 секунды,
        /// между получением последнего пакета SR из источника SSRC_n и посылкой этого блока отчета о приеме.
        /// Если пакет SR еще не был получен от SSRC_n, то поле DLSR имеет нулевое значение.
        /// </summary>
        public uint DelaySinceLastSRTimestamp = 0;

        /// <summary>
        /// Разброс времени доставки: 32 бита
        /// Оценка статистической вариации периода прихода RTP-пакетов,
        /// измеряемого с помощью временных меток и характеризуемого целым числом.
        /// </summary>
        public double Jitter = 0;
    }
}
